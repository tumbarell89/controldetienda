Necesito un trigger para cuando se inserte una dsalidaalmacens, la misma lleva asociada un grupo de
 productos que van a almacenarse a la tabla dproductosalidas, estos productos deben cumplir
 que su cantidad para almacenarse deba ser menor o igual que la que se encuentre en la tabla
dalmaceninternos, comparandose para saber que producto se maneja para la comparacion el dproductos_id y el
precio, pues puede haber un mismo producto repetido en la tabla pero con diferentes precios.
Despues de insertado si todo sale bien se debe ir a la tabla dalmaceninternos y rebajarle la cantidad al producto insertado,
e insertar o actualizar el mismo en la tabla dalmacenventas si la dsalidaalmacens que se va insertar
viene con el valor esventa en true, en caso de eliminarse dsalidaalmacens se debe restaurar las cantidades del
producto que estaba en dproductosalidas en el dalmaceninternos

CREATE TABLE IF NOT EXISTS public.dsalidaalmacens
(
    id bigint NOT NULL DEFAULT nextval('dsalidaalmacens_id_seq'::regclass),
    factura character varying(255) COLLATE pg_catalog."default" NOT NULL,
    total double precision NOT NULL,
    esventa boolean NOT NULL,
    nalmacenes_origen_id bigint NOT NULL,
    nalmacenes_destino_id bigint,
    dproveedor_destino_id bigint,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT dsalidaalmacens_pkey PRIMARY KEY (id),
    CONSTRAINT dsalidaalmacens_dproveedor_destino_id_foreign FOREIGN KEY (dproveedor_destino_id)
        REFERENCES public.dclienteproveedors (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT dsalidaalmacens_nalmacenes_destino_id_foreign FOREIGN KEY (nalmacenes_destino_id)
        REFERENCES public.nalmacens (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT dsalidaalmacens_nalmacenes_origen_id_foreign FOREIGN KEY (nalmacenes_origen_id)
        REFERENCES public.nalmacens (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

CREATE TABLE IF NOT EXISTS public.dproductosalidas
(
    id bigint NOT NULL DEFAULT nextval('dproductosalidas_id_seq'::regclass),
    cantidad double precision NOT NULL,
    precio double precision NOT NULL,
    dproducto_id bigint NOT NULL,
    dsalidaalmacen_id bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    precio numeric(19,2) NOT NULL,
    CONSTRAINT dproductosalidas_pkey PRIMARY KEY (id),
    CONSTRAINT dproductosalidas_dproducto_id_foreign FOREIGN KEY (dproducto_id)
        REFERENCES public.dproductos (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT dproductosalidas_dsalidaalmacen_id_foreign FOREIGN KEY (dsalidaalmacen_id)
        REFERENCES public.dsalidaalmacens (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

CREATE TABLE IF NOT EXISTS public.dalmaceninternos
(
    id bigint NOT NULL DEFAULT nextval('dalmaceninternos_id_seq'::regclass),
    cantidad double precision NOT NULL,
    ialmacens_id bigint NOT NULL,
    dproductos_id bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    precio numeric(19,2) NOT NULL,
    CONSTRAINT dalmaceninternos_pkey PRIMARY KEY (id),
    CONSTRAINT dalmaceninternos_dproductos_id_foreign FOREIGN KEY (dproductos_id)
        REFERENCES public.dproductos (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT dalmaceninternos_ialmacens_id_foreign FOREIGN KEY (ialmacens_id)
        REFERENCES public.nalmacens (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION


CREATE TABLE IF NOT EXISTS public.dalmacenventas
(
    id bigint NOT NULL DEFAULT nextval('dalmacenventas_id_seq'::regclass),
    cantidad double precision NOT NULL,
    precio double precision NOT NULL,
    valamcens_id bigint NOT NULL,
    dproductos_id bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT dalmacenventas_pkey PRIMARY KEY (id),
    CONSTRAINT dalmacenventas_dproductos_id_foreign FOREIGN KEY (dproductos_id)
        REFERENCES public.dproductos (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT dalmacenventas_valamcens_id_foreign FOREIGN KEY (valamcens_id)
        REFERENCES public.nalmacens (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
-- Crear la función para manejar la inserción en dproductosalidas
-- DROP FUNCTION IF EXISTS public.handle_dproductosalidas_insert_or_update();

CREATE OR REPLACE FUNCTION public.handle_dproductosalidas_insert_or_update()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
DECLARE
    v_salida dsalidaalmacens%ROWTYPE;
BEGIN
    -- Obtener los detalles de la salida asociada
    SELECT * INTO v_salida FROM dsalidaalmacens WHERE id = NEW.dsalidaalmacen_id;

    -- Verificar que la cantidad en dalmaceninternos sea suficiente
    IF EXISTS (
        SELECT 1
        FROM dalmaceninternos
        WHERE dproductos_id = NEW.dproducto_id
          AND precio = NEW.precio
          AND cantidad >= NEW.cantidad
    ) THEN
        -- Si es una actualización, revertir los cambios de la versión anterior
        IF TG_OP = 'UPDATE' THEN
            UPDATE dalmaceninternos
            SET cantidad = cantidad + OLD.cantidad
            WHERE dproductos_id = OLD.dproducto_id
              AND precio = OLD.precio;

            IF v_salida.esventa THEN
                UPDATE dalmacenventas
                SET cantidad = cantidad - OLD.cantidad
                WHERE dproductos_id = OLD.dproducto_id
                  AND precio = OLD.precio;
            END IF;
        END IF;

        -- Actualizar la cantidad en dalmaceninternos
        UPDATE dalmaceninternos
        SET cantidad = cantidad - NEW.cantidad
        WHERE dproductos_id = NEW.dproducto_id
          AND precio = NEW.precio;

        -- Si es una venta, actualizar o insertar en dalmacenventas
        IF v_salida.esventa THEN
            IF EXISTS (
                SELECT 1
                FROM dalmacenventas
                WHERE dproductos_id = NEW.dproducto_id
                  AND precio = NEW.precio
            ) THEN
                UPDATE dalmacenventas
                SET cantidad = cantidad + NEW.cantidad
                WHERE dproductos_id = NEW.dproducto_id
                  AND precio = NEW.precio;
            ELSE
                INSERT INTO dalmacenventas (cantidad, precio, valamcens_id, dproductos_id, created_at, updated_at)
                VALUES (NEW.cantidad, NEW.precio, v_salida.nalmacenes_origen_id, NEW.dproducto_id, NOW(), NOW());
            END IF;
        END IF;
    ELSE
        RAISE EXCEPTION 'Cantidad insuficiente para el producto % con precio %', NEW.dproducto_id, NEW.precio;
    END IF;

    RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public.handle_dproductosalidas_insert_or_update()
    OWNER TO postgres;

-- DROP TRIGGER IF EXISTS after_dproductosalidas_insert_or_update ON public.dproductosalidas;

CREATE OR REPLACE TRIGGER after_dproductosalidas_insert_or_update
    AFTER INSERT OR UPDATE
    ON public.dproductosalidas
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_dproductosalidas_insert_or_update();

ALTER TABLE public.dproductosalidas
    DISABLE TRIGGER after_dproductosalidas_insert_or_update;



-- Crear la función para manejar la eliminación en dproductosalidas
CREATE OR REPLACE FUNCTION handle_dproductosalidas_delete() RETURNS trigger AS $$
DECLARE
    v_salida dsalidaalmacens%ROWTYPE;
BEGIN
    -- Obtener los detalles de la salida asociada
    SELECT * INTO v_salida FROM dsalidaalmacens WHERE id = OLD.dsalidaalmacen_id;

    -- Restaurar la cantidad en dalmaceninternos
    UPDATE dalmaceninternos
    SET cantidad = cantidad + OLD.cantidad
    WHERE dproductos_id = OLD.dproducto_id
      AND precio = OLD.precio;

    -- Si era una venta, actualizar la cantidad en dalmacenventas
    IF v_salida.esventa THEN
        UPDATE dalmacenventas
        SET cantidad = cantidad - OLD.cantidad
        WHERE dproductos_id = OLD.dproducto_id
          AND precio = OLD.precio;

        -- Eliminar el registro de dalmacenventas si la cantidad llega a cero
        DELETE FROM dalmacenventas
        WHERE dproductos_id = OLD.dproducto_id
          AND precio = OLD.precio
          AND cantidad = 0;
    END IF;

    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

-- Crear el trigger para llamar a la función al eliminar en dproductosalidas
CREATE TRIGGER after_dproductosalidas_delete
AFTER DELETE ON dproductosalidas
FOR EACH ROW
EXECUTE FUNCTION handle_dproductosalidas_delete();
